{"ast":null,"code":"var _jsxFileName = \"/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js\",\n    _s = $RefreshSig$();\n\n// TUTORIAL AT MINUTE 13\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport Todo from './Todos';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet count = 0; // with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nconst ACTIONS = {\n  TOGGLE_TODO: 'toggle todo',\n  NEW_TODO: 'new todo',\n  DELETE_TODO: 'delete todo'\n};\n\nfunction App() {\n  _s();\n\n  const [todos, dispatch] = useReducer(reducer, []);\n  const [name, setName] = useState('');\n\n  function reducer(todos, action) {\n    console.log('action.type', action.type);\n\n    switch (action.type) {\n      case ACTIONS.TOGGLE_TODO:\n        console.log('fired TOGGLE TODO!');\n        return todos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return { ...todo,\n              complete: !todo.complete\n            };\n          }\n\n          return todo;\n        });\n\n      case ACTIONS.NEW_TODO:\n        console.log('fired NEW TODO!');\n        return [...todos, newTodo(action.payload.name)];\n\n      case ACTIONS.DELETE_TODO:\n        return deleteIt(id);\n\n      default:\n        break;\n      // case ACTIONS.DELETE_TODO:\n      //   return deleteIt(action.payload.id)\n    }\n  } ///todos.map( todo => todo.id === action.payload.id ? { ...todo, complete:!todo.complete }  : todo  )\n\n\n  function deleteIt(id) {\n    todos.filter(todo => todo.id !== id);\n  }\n\n  function newTodo(name) {\n    count += 1;\n    console.log({\n      id: count,\n      name: name\n    });\n    return {\n      id: count,\n      name: name,\n      complete: false\n    };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    dispatch({\n      type: ACTIONS.NEW_TODO,\n      payload: {\n        name: name\n      }\n    });\n    setName('');\n  } // payload is a propertu that gets passed into your dispatch/reducer along with type,\n  // type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n  // try also with a wrapped invocation  form-widgets\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n      todo: todo,\n      dispatch: dispatch\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 26\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n} // Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\n\n_s(App, \"GaUZ+cD+sH211eZBBfAkdHRUf0k=\");\n\n_c = App;\nexport default App;\nexport { ACTIONS };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js"],"names":["React","useReducer","useState","Todo","count","ACTIONS","TOGGLE_TODO","NEW_TODO","DELETE_TODO","App","todos","dispatch","reducer","name","setName","action","console","log","type","map","todo","id","payload","complete","newTodo","deleteIt","filter","handleSubmit","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["// TUTORIAL AT MINUTE 13\n\n\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport Todo from './Todos'\n\nlet count = 0;\n// with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nconst ACTIONS = {\n\n\n  TOGGLE_TODO: 'toggle todo',\n\n  NEW_TODO: 'new todo',\n\n  DELETE_TODO: 'delete todo',\n\n}\n\n\n\nfunction App() {\n\n\n  const [todos, dispatch] = useReducer(reducer, []);\n  const [name, setName] = useState('')\n\n\n\n  function reducer(todos, action) {\n\n    console.log('action.type',action.type)\n\n    switch (action.type) {\n\n\n      case ACTIONS.TOGGLE_TODO:\n        console.log('fired TOGGLE TODO!');\n        return todos.map(todo => {\n\n          if (todo.id === action.payload.id) {\n            return { ...todo, complete: !todo.complete }\n          }\n\n          return todo\n\n        });\n        \n\n\n      case ACTIONS.NEW_TODO:\n        console.log('fired NEW TODO!')\n        return [...todos, newTodo(action.payload.name)]\n\n\n        case ACTIONS.DELETE_TODO:\n         return deleteIt(id)\n          \n\n        default:\n          break;\n\n\n      // case ACTIONS.DELETE_TODO:\n      //   return deleteIt(action.payload.id)\n\n\n\n    }\n  }\n\n  ///todos.map( todo => todo.id === action.payload.id ? { ...todo, complete:!todo.complete }  : todo  )\n\n\n\n  function deleteIt(id){\n\n todos.filter( todo => todo.id !== id  )\n\n   }\n\n  function newTodo(name) {\n\n\n\n    count += 1;\n    console.log({ id: count, name: name })\n    return { id: count, name: name, complete: false }\n\n\n  }\n\n\n\n\n  function handleSubmit(e) {\n\n    e.preventDefault()\n    dispatch({ type: ACTIONS.NEW_TODO, payload: { name: name } })\n\n    setName('')\n\n  }\n\n\n\n  // payload is a propertu that gets passed into your dispatch/reducer along with type,\n  // type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n\n\n\n  // try also with a wrapped invocation  form-widgets\n  return (\n    <div className='container'>\n      <form action=\"\" onSubmit={handleSubmit}  >\n\n\n\n        <input\n          type=\"text\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n\n        \n\n\n\n      </form>\n      {todos.map(todo => <Todo key={todo.id} todo={todo} dispatch={dispatch} />)}\n    </div>\n  );\n}\n\n// Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\nexport default App;\nexport { ACTIONS }"]},"metadata":{},"sourceType":"module"}