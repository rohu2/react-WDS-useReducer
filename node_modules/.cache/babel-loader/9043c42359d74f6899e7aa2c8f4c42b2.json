{"ast":null,"code":"var _jsxFileName = \"/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js\",\n    _s = $RefreshSig$();\n\n// TUTORIAL AT MINUTE 13\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport Todo from './Todos';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet count = 0; // with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nconst ACTIONS = {\n  NEW_TODO: 'new todo',\n  TOGGLE_TODO: 'toggle todo',\n  DELETE_TODO: 'delete todo'\n};\n\nfunction App() {\n  _s();\n\n  const [todos, dispatch] = useReducer(reducer, []);\n  const [name, setName] = useState('');\n\n  function reducer(todos, action) {\n    console.log({\n      action\n    });\n\n    switch (action.type) {\n      case ACTIONS.NEW_TODO:\n        console.log('fired!');\n        return [...todos, newTodo(action.payload.name)];\n        break;\n\n      case ACTIONS.TOGGLE_TODO:\n        return todos.map(todo => {\n          if (todo.id === action.payload.id) {\n            return { ...todo,\n              complete: !todo.complete\n            };\n          }\n\n          return todo;\n        });\n        break;\n      // case ACTIONS.DELETE_TODO:\n      //   return deleteIt(action.payload.id)\n    }\n  } ///todos.map( todo => todo.id === action.payload.id ? { ...todo, complete:!todo.complete }  : todo  )\n  // function deleteIt(id){\n  // todos.filter( todo => todo.id !== id  )\n  // }\n\n\n  function newTodo(name) {\n    count += 1;\n    console.log({\n      id: count,\n      name: name\n    });\n    return {\n      id: count,\n      name: name,\n      complete: false\n    };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    dispatch({\n      type: ACTIONS.NEW_TODO,\n      payload: {\n        name: name\n      }\n    });\n    setName('');\n  } // payload is a propertu that gets passed into your dispatch/reducer along with type,\n  // type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n  // try also with a wrapped invocation  form-widgets\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 1\n      }, this), todos.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n        todo: todo,\n        dispatch: dispatch\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 20\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n} // Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\n\n_s(App, \"GaUZ+cD+sH211eZBBfAkdHRUf0k=\");\n\n_c = App;\nexport default App;\nexport { ACTIONS };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js"],"names":["React","useReducer","useState","Todo","count","ACTIONS","NEW_TODO","TOGGLE_TODO","DELETE_TODO","App","todos","dispatch","reducer","name","setName","action","console","log","type","newTodo","payload","map","todo","id","complete","handleSubmit","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["// TUTORIAL AT MINUTE 13\n\n\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\nimport Todo from './Todos'\n\nlet count = 0 ;\n// with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nconst ACTIONS = {\n\nNEW_TODO : 'new todo',\n\nTOGGLE_TODO : 'toggle todo',\n\nDELETE_TODO : 'delete todo',\n\n}\n\n\n\nfunction App() {\n\n\nconst [todos, dispatch] = useReducer(reducer ,[]);\nconst [name, setName] = useState('')\n\n\n\nfunction reducer(todos, action) {\n\nconsole.log({action})\n\nswitch(action.type){\n\ncase ACTIONS.NEW_TODO:\n  console.log('fired!')\n  return [ ...todos, newTodo(action.payload.name)]\nbreak\n\ncase ACTIONS.TOGGLE_TODO:\n\n  return todos.map( todo =>{\n\nif(todo.id === action.payload.id){\n  return { ...todo, complete:!todo.complete  }\n}\n\nreturn todo\n\n  })\nbreak;\n\n// case ACTIONS.DELETE_TODO:\n//   return deleteIt(action.payload.id)\n\n\n\n}\n}\n\n///todos.map( todo => todo.id === action.payload.id ? { ...todo, complete:!todo.complete }  : todo  )\n\n\n\n// function deleteIt(id){\n\n// todos.filter( todo => todo.id !== id  )\n\n// }\n\nfunction newTodo(name){\n\n\n\ncount += 1;\nconsole.log({ id: count , name:name})\nreturn { id: count , name:name, complete:false }\n\n\n}\n\n\n\n\nfunction handleSubmit(e) {\n\ne.preventDefault()\ndispatch({type: ACTIONS.NEW_TODO , payload:{ name:name }})\n\nsetName('')\n\n}\n \n\n\n// payload is a propertu that gets passed into your dispatch/reducer along with type,\n// type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n\n\n\n// try also with a wrapped invocation  form-widgets\n  return (\n    <div className='container'>\n      <form action=\"\" onSubmit={handleSubmit}  >\n\n\n\n<input \ntype=\"text\"\nvalue={name}\nonChange={ e => setName(e.target.value ) }\n/>\n\n{todos.map(todo => <Todo key={todo.id} todo={todo} dispatch={dispatch}/>)}\n\n\n\n      </form>\n    </div>\n  );\n}\n\n// Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\nexport default App;\nexport {ACTIONS}"]},"metadata":{},"sourceType":"module"}