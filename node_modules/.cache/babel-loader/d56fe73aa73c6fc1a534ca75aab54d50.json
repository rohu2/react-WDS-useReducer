{"ast":null,"code":"var _jsxFileName = \"/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js\",\n    _s = $RefreshSig$();\n\n// TUTORIAL AT MINUTE 13\nimport React, { useReducer, useState } from 'react';\nimport './App.css'; // with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ACTIONS = {\n  NEW_TODO: 'new todo',\n  TOGGLE_TODO: 'toggle todo'\n};\n\nfunction App() {\n  _s();\n\n  const [todos, dispatch] = useReducer(reducer, []);\n  const [name, setName] = useState(''); // reducer is like a centralized switchboard for functions - I suppose its difference between this and just a generic switch is that it has access to immutable state - so by some magic - you can edit state with this magical switchboard\n  // so whenever you have to change state of the one state the dispatchReducer is responsible for you go via the switchboard ==== and all you do is put in an object with your instructions:\n  // which function you want to invoke - \n  // and any particulars that that function might neeed - \n  // in the lexical scope of a reducer all the case-functions have access to state - I guess its like a libruary of historical documents - you can't take them out of the libruarty but you can see them and maek your own copy with edits when you.\n  // so in the reducer context you have access to state and can modify it with your own functions - if I am not mi\n  // the case function will need to return state  \n  // drilling syntax\n\n  function reducer(todos, action) {\n    switch (action.type) {\n      case ACTIONS.NEW_TODO:\n        return [...todos, newTodo(action.payload.name)];\n\n      case ACTIONS.TOGGLE_TODO:\n        return [];\n    }\n  }\n\n  function newTodo(name) {\n    return {\n      id: Date.now(),\n      name: name,\n      complete: false\n    };\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    dispatch({\n      type: ACTIONS.NEW_TODO,\n      payload: {\n        name: name\n      }\n    });\n    setName('');\n  }\n\n  console.log(todos); // payload is a propertu that gets passed into your dispatch/reducer along with type,\n  // type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n  // try also with a wrapped invocation  form-widgets\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n} // Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\n\n_s(App, \"GaUZ+cD+sH211eZBBfAkdHRUf0k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/admin_user/Desktop/React-useReducer/react-useReducer-start2/src/App.js"],"names":["React","useReducer","useState","ACTIONS","NEW_TODO","TOGGLE_TODO","App","todos","dispatch","reducer","name","setName","action","type","newTodo","payload","id","Date","now","complete","handleSubmit","e","preventDefault","console","log","target","value"],"mappings":";;;AAAA;AAGA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,WAAP,C,CAGA;AACA;;;AAEA,MAAMC,OAAO,GAAG;AAEhBC,EAAAA,QAAQ,EAAG,UAFK;AAIhBC,EAAAA,WAAW,EAAG;AAJE,CAAhB;;AAUA,SAASC,GAAT,GAAe;AAAA;;AAGf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACQ,OAAD,EAAU,EAAV,CAApC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAJe,CASf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAASO,OAAT,CAAiBF,KAAjB,EAAwBK,MAAxB,EAAgC;AAEhC,YAAOA,MAAM,CAACC,IAAd;AAEA,WAAKV,OAAO,CAACC,QAAb;AACE,eAAO,CAAE,GAAGG,KAAL,EAAYO,OAAO,CAACF,MAAM,CAACG,OAAP,CAAeL,IAAhB,CAAnB,CAAP;;AAGF,WAAKP,OAAO,CAACE,WAAb;AACE,eAAO,EAAP;AAPF;AAYC;;AAOD,WAASS,OAAT,CAAiBJ,IAAjB,EAAsB;AAEtB,WAAO;AAAEM,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAAN;AAAmBR,MAAAA,IAAI,EAACA,IAAxB;AAA8BS,MAAAA,QAAQ,EAAC;AAAvC,KAAP;AAIC;;AAOD,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AAEzBA,IAAAA,CAAC,CAACC,cAAF;AACAd,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAEV,OAAO,CAACC,QAAf;AAA0BW,MAAAA,OAAO,EAAC;AAAEL,QAAAA,IAAI,EAACA;AAAP;AAAlC,KAAD,CAAR;AAEAC,IAAAA,OAAO,CAAC,EAAD,CAAP;AAEC;;AAGDY,EAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ,EA/De,CAiEf;AACA;AAIA;;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAM,MAAA,MAAM,EAAC,EAAb;AAAgB,MAAA,QAAQ,EAAEa,YAA1B;AAAA,6BAIN;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,KAAK,EAAEV,IAFP;AAGA,QAAA,QAAQ,EAAGW,CAAC,IAAIV,OAAO,CAACU,CAAC,CAACI,MAAF,CAASC,KAAV;AAHvB;AAAA;AAAA;AAAA;AAAA;AAJM;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,C,CAED;;;GA3FSpB,G;;KAAAA,G;AA6FT,eAAeA,GAAf","sourcesContent":["// TUTORIAL AT MINUTE 13\n\n\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\n\n\n// with reducers you pass in a type which is the thing you want to do - which case you want to use\n// and then you pass in a payload which is the details you want your case to use\n\nconst ACTIONS = {\n\nNEW_TODO : 'new todo',\n\nTOGGLE_TODO : 'toggle todo',\n\n}\n\n\n\nfunction App() {\n\n\nconst [todos, dispatch] = useReducer(reducer ,[]);\nconst [name, setName] = useState('')\n\n\n\n\n// reducer is like a centralized switchboard for functions - I suppose its difference between this and just a generic switch is that it has access to immutable state - so by some magic - you can edit state with this magical switchboard\n// so whenever you have to change state of the one state the dispatchReducer is responsible for you go via the switchboard ==== and all you do is put in an object with your instructions:\n// which function you want to invoke - \n// and any particulars that that function might neeed - \n// in the lexical scope of a reducer all the case-functions have access to state - I guess its like a libruary of historical documents - you can't take them out of the libruarty but you can see them and maek your own copy with edits when you.\n// so in the reducer context you have access to state and can modify it with your own functions - if I am not mi\n// the case function will need to return state  \n// drilling syntax\n\n\nfunction reducer(todos, action) {\n\nswitch(action.type){\n\ncase ACTIONS.NEW_TODO:\n  return [ ...todos, newTodo(action.payload.name)]\n\n\ncase ACTIONS.TOGGLE_TODO:\n  return [   ]\n\n\n\n}\n}\n\n\n\n\n\n\nfunction newTodo(name){\n\nreturn { id: Date.now() , name:name, complete:false }\n\n\n\n}\n\n\n\n\n\n\nfunction handleSubmit(e) {\n\ne.preventDefault()\ndispatch({type: ACTIONS.NEW_TODO , payload:{ name:name }})\n\nsetName('')\n\n}\n \n\nconsole.log(todos)\n\n// payload is a propertu that gets passed into your dispatch/reducer along with type,\n// type will switch you to the correct case in you dispatch/reducer and payload will have all the details that that case's function will need - payload is itself an object of all the properties / variables you will need in your case function\n\n\n\n// try also with a wrapped invocation  form-widgets\n  return (\n    <div className='container'>\n      <form action=\"\" onSubmit={handleSubmit}  >\n\n\n\n<input \ntype=\"text\"\nvalue={name}\nonChange={ e => setName(e.target.value ) }\n/>\n\n\n\n\n      </form>\n    </div>\n  );\n}\n\n// Pass in a reference to a callback that invokes dispatch not a direct dispatch invocation\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}